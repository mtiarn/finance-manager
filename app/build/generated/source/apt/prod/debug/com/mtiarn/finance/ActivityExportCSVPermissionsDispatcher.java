// This file was generated by PermissionsDispatcher. Do not modify!
package com.mtiarn.finance;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class ActivityExportCSVPermissionsDispatcher {
  private static final int REQUEST_SELECTFILE = 6;

  private static final String[] PERMISSION_SELECTFILE = new String[] {"android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_EXPORTCSV = 7;

  private static final String[] PERMISSION_EXPORTCSV = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"};

  private ActivityExportCSVPermissionsDispatcher() {
  }

  static void SelectFileWithPermissionCheck(ActivityExportCSV target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SELECTFILE)) {
      target.SelectFile();
    } else {
      ActivityCompat.requestPermissions(target, PERMISSION_SELECTFILE, REQUEST_SELECTFILE);
    }
  }

  static void exportCSVWithPermissionCheck(ActivityExportCSV target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_EXPORTCSV)) {
      target.exportCSV();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_EXPORTCSV)) {
        target.showRationaleForWrite_external_storage(new ActivityExportCSVExportCSVPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_EXPORTCSV, REQUEST_EXPORTCSV);
      }
    }
  }

  static void onRequestPermissionsResult(ActivityExportCSV target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_SELECTFILE:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.SelectFile();
      }
      break;
      case REQUEST_EXPORTCSV:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.exportCSV();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_EXPORTCSV)) {
          target.onWrite_external_storageNeverAskAgain();
        } else {
          target.onWrite_external_storageDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class ActivityExportCSVExportCSVPermissionRequest implements PermissionRequest {
    private final WeakReference<ActivityExportCSV> weakTarget;

    private ActivityExportCSVExportCSVPermissionRequest(ActivityExportCSV target) {
      this.weakTarget = new WeakReference<ActivityExportCSV>(target);
    }

    @Override
    public void proceed() {
      ActivityExportCSV target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_EXPORTCSV, REQUEST_EXPORTCSV);
    }

    @Override
    public void cancel() {
      ActivityExportCSV target = weakTarget.get();
      if (target == null) return;
      target.onWrite_external_storageDenied();
    }
  }
}
