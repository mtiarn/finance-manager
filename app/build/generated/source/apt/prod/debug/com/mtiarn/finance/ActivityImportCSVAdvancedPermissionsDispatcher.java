// This file was generated by PermissionsDispatcher. Do not modify!
package com.mtiarn.finance;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class ActivityImportCSVAdvancedPermissionsDispatcher {
  private static final int REQUEST_SELECTFILE = 10;

  private static final String[] PERMISSION_SELECTFILE = new String[] {"android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_IMPORTCSV = 11;

  private static final String[] PERMISSION_IMPORTCSV = new String[] {"android.permission.READ_EXTERNAL_STORAGE"};

  private ActivityImportCSVAdvancedPermissionsDispatcher() {
  }

  static void SelectFileWithPermissionCheck(ActivityImportCSVAdvanced target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SELECTFILE)) {
      target.SelectFile();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SELECTFILE)) {
        target.showRationaleForReadExternalStorage(new ActivityImportCSVAdvancedSelectFilePermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_SELECTFILE, REQUEST_SELECTFILE);
      }
    }
  }

  static void importCSVWithPermissionCheck(ActivityImportCSVAdvanced target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_IMPORTCSV)) {
      target.importCSV();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_IMPORTCSV)) {
        target.showRationaleForReadExternalStorage(new ActivityImportCSVAdvancedImportCSVPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_IMPORTCSV, REQUEST_IMPORTCSV);
      }
    }
  }

  static void onRequestPermissionsResult(ActivityImportCSVAdvanced target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_SELECTFILE:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.SelectFile();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SELECTFILE)) {
          target.onReadExternalStorageNeverAskAgain();
        } else {
          target.onReadExternalStorageDenied();
        }
      }
      break;
      case REQUEST_IMPORTCSV:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.importCSV();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_IMPORTCSV)) {
          target.onReadExternalStorageNeverAskAgain();
        } else {
          target.onReadExternalStorageDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class ActivityImportCSVAdvancedSelectFilePermissionRequest implements PermissionRequest {
    private final WeakReference<ActivityImportCSVAdvanced> weakTarget;

    private ActivityImportCSVAdvancedSelectFilePermissionRequest(ActivityImportCSVAdvanced target) {
      this.weakTarget = new WeakReference<ActivityImportCSVAdvanced>(target);
    }

    @Override
    public void proceed() {
      ActivityImportCSVAdvanced target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_SELECTFILE, REQUEST_SELECTFILE);
    }

    @Override
    public void cancel() {
      ActivityImportCSVAdvanced target = weakTarget.get();
      if (target == null) return;
      target.onReadExternalStorageDenied();
    }
  }

  private static final class ActivityImportCSVAdvancedImportCSVPermissionRequest implements PermissionRequest {
    private final WeakReference<ActivityImportCSVAdvanced> weakTarget;

    private ActivityImportCSVAdvancedImportCSVPermissionRequest(ActivityImportCSVAdvanced target) {
      this.weakTarget = new WeakReference<ActivityImportCSVAdvanced>(target);
    }

    @Override
    public void proceed() {
      ActivityImportCSVAdvanced target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_IMPORTCSV, REQUEST_IMPORTCSV);
    }

    @Override
    public void cancel() {
      ActivityImportCSVAdvanced target = weakTarget.get();
      if (target == null) return;
      target.onReadExternalStorageDenied();
    }
  }
}
