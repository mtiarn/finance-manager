// Generated by Dagger (https://google.github.io/dagger).
package com.mtiarn.finance.di;

import android.content.Context;
import android.content.SharedPreferences;
import com.google.gson.Gson;
import com.mtiarn.finance.ActivityEditTransaction;
import com.mtiarn.finance.ActivityEditTransaction_MembersInjector;
import com.mtiarn.finance.ActivityMain;
import com.mtiarn.finance.ActivityMain_MembersInjector;
import com.mtiarn.finance.ActivityPro;
import com.mtiarn.finance.ActivityPro_MembersInjector;
import com.mtiarn.finance.FragmentAccounts;
import com.mtiarn.finance.FragmentAccounts_MembersInjector;
import com.mtiarn.finance.FragmentSummary;
import com.mtiarn.finance.FragmentSummary_MembersInjector;
import com.mtiarn.finance.FragmentTransactions;
import com.mtiarn.finance.FragmentTransactions_MembersInjector;
import com.mtiarn.finance.adapter.viewholders.TransactionViewHolderParams;
import com.mtiarn.finance.adapter.viewholders.TransactionViewHolderParams_MembersInjector;
import com.mtiarn.finance.dao.AccountsDAO;
import com.mtiarn.finance.dao.CabbagesDAO;
import com.mtiarn.finance.dao.CategoriesDAO;
import com.mtiarn.finance.dao.CreditsDAO;
import com.mtiarn.finance.dao.DepartmentsDAO;
import com.mtiarn.finance.dao.LocationsDAO;
import com.mtiarn.finance.dao.PayeesDAO;
import com.mtiarn.finance.dao.ProjectsDAO;
import com.mtiarn.finance.dao.SendersDAO;
import com.mtiarn.finance.dao.SmsDAO;
import com.mtiarn.finance.dao.SmsMarkersDAO;
import com.mtiarn.finance.dao.TransactionsDAO;
import com.mtiarn.finance.di.modules.BillingModule;
import com.mtiarn.finance.di.modules.BillingModule_ProvideBillingServiceFactory;
import com.mtiarn.finance.di.modules.ContextModule;
import com.mtiarn.finance.di.modules.ContextModule_ProvideContextFactory;
import com.mtiarn.finance.di.modules.DaoModule;
import com.mtiarn.finance.di.modules.DaoModule_ProvideAccountsDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideCabbagesDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideCategoriesDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideCreditsDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideDepartmentsDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideLocationsDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvidePayeesDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideProjectsDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideSendersDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideSmsDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideSmsMarkersDAOFactory;
import com.mtiarn.finance.di.modules.DaoModule_ProvideTransactionsDAOFactory;
import com.mtiarn.finance.di.modules.FtsApiModule;
import com.mtiarn.finance.di.modules.FtsApiModule_ProvideSyncApiFactory;
import com.mtiarn.finance.di.modules.FtsHelperModule;
import com.mtiarn.finance.di.modules.FtsHelperModule_ProvideFtsHelperFactory;
import com.mtiarn.finance.di.modules.FtsRetrofitModule;
import com.mtiarn.finance.di.modules.FtsRetrofitModule_ProvideConverterFactoryFactory;
import com.mtiarn.finance.di.modules.FtsRetrofitModule_ProvideGsonFactory;
import com.mtiarn.finance.di.modules.FtsRetrofitModule_ProvideHttpLoggingInterceptorFactory;
import com.mtiarn.finance.di.modules.FtsRetrofitModule_ProvideOkHttpClientFactory;
import com.mtiarn.finance.di.modules.FtsRetrofitModule_ProvideRetrofitBuilderFactory;
import com.mtiarn.finance.di.modules.FtsRetrofitModule_ProvideRetrofitFactory;
import com.mtiarn.finance.di.modules.PreferencesModule;
import com.mtiarn.finance.di.modules.PreferencesModule_ProvideDefaultSharedPreferencesFactory;
import com.mtiarn.finance.fts.FtsApi;
import com.mtiarn.finance.fts.FtsHelper;
import com.mtiarn.finance.fts.FtsHelper_MembersInjector;
import com.mtiarn.finance.iab.BillingService;
import com.mtiarn.finance.widgets.ToolbarActivity;
import com.mtiarn.finance.widgets.ToolbarActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Converter;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private PreferencesModule preferencesModule;

  private Provider<Context> provideContextProvider;

  private Provider<BillingService> provideBillingServiceProvider;

  private Provider<SmsMarkersDAO> provideSmsMarkersDAOProvider;

  private Provider<SmsDAO> provideSmsDAOProvider;

  private Provider<SendersDAO> provideSendersDAOProvider;

  private Provider<TransactionsDAO> provideTransactionsDAOProvider;

  private PreferencesModule_ProvideDefaultSharedPreferencesFactory
      provideDefaultSharedPreferencesProvider;

  private Provider<AccountsDAO> provideAccountsDAOProvider;

  private Provider<CreditsDAO> provideCreditsDAOProvider;

  private Provider<CabbagesDAO> provideCabbagesDAOProvider;

  private Provider<FtsHelper> provideFtsHelperProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<Converter.Factory> provideConverterFactoryProvider;

  private Provider<HttpLoggingInterceptor> provideHttpLoggingInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<FtsApi> provideSyncApiProvider;

  private Provider<DepartmentsDAO> provideDepartmentsDAOProvider;

  private Provider<PayeesDAO> providePayeesDAOProvider;

  private Provider<LocationsDAO> provideLocationsDAOProvider;

  private Provider<CategoriesDAO> provideCategoriesDAOProvider;

  private Provider<ProjectsDAO> provideProjectsDAOProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private SharedPreferences getSharedPreferences() {
    return PreferencesModule_ProvideDefaultSharedPreferencesFactory
        .proxyProvideDefaultSharedPreferences(preferencesModule, provideContextProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideContextProvider =
        DoubleCheck.provider(ContextModule_ProvideContextFactory.create(builder.contextModule));
    this.preferencesModule = builder.preferencesModule;
    this.provideBillingServiceProvider =
        DoubleCheck.provider(
            BillingModule_ProvideBillingServiceFactory.create(builder.billingModule));
    this.provideSmsMarkersDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideSmsMarkersDAOFactory.create(
                builder.daoModule, provideContextProvider));
    this.provideSmsDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideSmsDAOFactory.create(builder.daoModule, provideContextProvider));
    this.provideSendersDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideSendersDAOFactory.create(builder.daoModule, provideContextProvider));
    this.provideTransactionsDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideTransactionsDAOFactory.create(
                builder.daoModule, provideContextProvider));
    this.provideDefaultSharedPreferencesProvider =
        PreferencesModule_ProvideDefaultSharedPreferencesFactory.create(
            builder.preferencesModule, provideContextProvider);
    this.provideAccountsDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideAccountsDAOFactory.create(builder.daoModule, provideContextProvider));
    this.provideCreditsDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideCreditsDAOFactory.create(builder.daoModule, provideContextProvider));
    this.provideCabbagesDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideCabbagesDAOFactory.create(builder.daoModule, provideContextProvider));
    this.provideFtsHelperProvider =
        DoubleCheck.provider(
            FtsHelperModule_ProvideFtsHelperFactory.create(builder.ftsHelperModule));
    this.provideGsonProvider =
        DoubleCheck.provider(
            FtsRetrofitModule_ProvideGsonFactory.create(builder.ftsRetrofitModule));
    this.provideConverterFactoryProvider =
        DoubleCheck.provider(
            FtsRetrofitModule_ProvideConverterFactoryFactory.create(
                builder.ftsRetrofitModule, provideGsonProvider));
    this.provideHttpLoggingInterceptorProvider =
        DoubleCheck.provider(
            FtsRetrofitModule_ProvideHttpLoggingInterceptorFactory.create(
                builder.ftsRetrofitModule));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            FtsRetrofitModule_ProvideOkHttpClientFactory.create(
                builder.ftsRetrofitModule, provideHttpLoggingInterceptorProvider));
    this.provideRetrofitBuilderProvider =
        DoubleCheck.provider(
            FtsRetrofitModule_ProvideRetrofitBuilderFactory.create(
                builder.ftsRetrofitModule,
                provideConverterFactoryProvider,
                provideOkHttpClientProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            FtsRetrofitModule_ProvideRetrofitFactory.create(
                builder.ftsRetrofitModule, provideRetrofitBuilderProvider));
    this.provideSyncApiProvider =
        DoubleCheck.provider(
            FtsApiModule_ProvideSyncApiFactory.create(
                builder.ftsApiModule, provideRetrofitProvider));
    this.provideDepartmentsDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideDepartmentsDAOFactory.create(
                builder.daoModule, provideContextProvider));
    this.providePayeesDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvidePayeesDAOFactory.create(builder.daoModule, provideContextProvider));
    this.provideLocationsDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideLocationsDAOFactory.create(builder.daoModule, provideContextProvider));
    this.provideCategoriesDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideCategoriesDAOFactory.create(
                builder.daoModule, provideContextProvider));
    this.provideProjectsDAOProvider =
        DoubleCheck.provider(
            DaoModule_ProvideProjectsDAOFactory.create(builder.daoModule, provideContextProvider));
  }

  @Override
  public Context getContext() {
    return provideContextProvider.get();
  }

  @Override
  public void inject(BillingService billingService) {}

  @Override
  public void inject(ActivityMain activityMain) {
    injectActivityMain(activityMain);
  }

  @Override
  public void inject(FragmentAccounts fragmentAccounts) {
    injectFragmentAccounts(fragmentAccounts);
  }

  @Override
  public void inject(FragmentSummary fragmentSummary) {
    injectFragmentSummary(fragmentSummary);
  }

  @Override
  public void inject(FragmentTransactions fragmentTransactions) {
    injectFragmentTransactions(fragmentTransactions);
  }

  @Override
  public void inject(ActivityPro activityPro) {
    injectActivityPro(activityPro);
  }

  @Override
  public void inject(ToolbarActivity toolbarActivity) {
    injectToolbarActivity(toolbarActivity);
  }

  @Override
  public void inject(ActivityEditTransaction activityEditTransaction) {
    injectActivityEditTransaction(activityEditTransaction);
  }

  @Override
  public void inject(FtsHelper ftsHelper) {
    injectFtsHelper(ftsHelper);
  }

  @Override
  public void inject(TransactionViewHolderParams transactionViewHolderParams) {
    injectTransactionViewHolderParams(transactionViewHolderParams);
  }

  private ActivityMain injectActivityMain(ActivityMain instance) {
    ToolbarActivity_MembersInjector.injectMPreferences(instance, getSharedPreferences());
    ActivityMain_MembersInjector.injectMBillingService(
        instance, DoubleCheck.lazy(provideBillingServiceProvider));
    ActivityMain_MembersInjector.injectMSmsMarkersDAO(
        instance, DoubleCheck.lazy(provideSmsMarkersDAOProvider));
    ActivityMain_MembersInjector.injectMSmsDAO(instance, DoubleCheck.lazy(provideSmsDAOProvider));
    ActivityMain_MembersInjector.injectMSendersDAO(
        instance, DoubleCheck.lazy(provideSendersDAOProvider));
    ActivityMain_MembersInjector.injectMTransactionsDAO(
        instance, DoubleCheck.lazy(provideTransactionsDAOProvider));
    return instance;
  }

  private FragmentAccounts injectFragmentAccounts(FragmentAccounts instance) {
    FragmentAccounts_MembersInjector.injectMBillingService(
        instance, DoubleCheck.lazy(provideBillingServiceProvider));
    FragmentAccounts_MembersInjector.injectMPreferences(
        instance, DoubleCheck.lazy(provideDefaultSharedPreferencesProvider));
    FragmentAccounts_MembersInjector.injectMAccountsDAO(
        instance, DoubleCheck.lazy(provideAccountsDAOProvider));
    FragmentAccounts_MembersInjector.injectMCreditsDAO(
        instance, DoubleCheck.lazy(provideCreditsDAOProvider));
    FragmentAccounts_MembersInjector.injectMTransactionsDAO(
        instance, DoubleCheck.lazy(provideTransactionsDAOProvider));
    FragmentAccounts_MembersInjector.injectMCabbagesDAO(
        instance, DoubleCheck.lazy(provideCabbagesDAOProvider));
    return instance;
  }

  private FragmentSummary injectFragmentSummary(FragmentSummary instance) {
    FragmentSummary_MembersInjector.injectMBillingService(
        instance, provideBillingServiceProvider.get());
    FragmentSummary_MembersInjector.injectMTransactionsDAO(
        instance, provideTransactionsDAOProvider.get());
    FragmentSummary_MembersInjector.injectMCabbagesDAO(instance, provideCabbagesDAOProvider.get());
    FragmentSummary_MembersInjector.injectMPreferences(instance, getSharedPreferences());
    return instance;
  }

  private FragmentTransactions injectFragmentTransactions(FragmentTransactions instance) {
    FragmentTransactions_MembersInjector.injectMBillingService(
        instance, provideBillingServiceProvider.get());
    FragmentTransactions_MembersInjector.injectMPreferences(instance, getSharedPreferences());
    FragmentTransactions_MembersInjector.injectMContext(instance, provideContextProvider.get());
    FragmentTransactions_MembersInjector.injectMTransactionsDAO(
        instance, provideTransactionsDAOProvider.get());
    FragmentTransactions_MembersInjector.injectMAccountsDAO(
        instance, provideAccountsDAOProvider.get());
    FragmentTransactions_MembersInjector.injectMCabbagesDAO(
        instance, provideCabbagesDAOProvider.get());
    return instance;
  }

  private ActivityPro injectActivityPro(ActivityPro instance) {
    ToolbarActivity_MembersInjector.injectMPreferences(instance, getSharedPreferences());
    ActivityPro_MembersInjector.injectMBillingService(
        instance, provideBillingServiceProvider.get());
    return instance;
  }

  private ToolbarActivity injectToolbarActivity(ToolbarActivity instance) {
    ToolbarActivity_MembersInjector.injectMPreferences(instance, getSharedPreferences());
    return instance;
  }

  private ActivityEditTransaction injectActivityEditTransaction(ActivityEditTransaction instance) {
    ToolbarActivity_MembersInjector.injectMPreferences(instance, getSharedPreferences());
    ActivityEditTransaction_MembersInjector.injectMFtsHelper(
        instance, provideFtsHelperProvider.get());
    return instance;
  }

  private FtsHelper injectFtsHelper(FtsHelper instance) {
    FtsHelper_MembersInjector.injectMApi(instance, provideSyncApiProvider.get());
    FtsHelper_MembersInjector.injectMContext(instance, provideContextProvider.get());
    return instance;
  }

  private TransactionViewHolderParams injectTransactionViewHolderParams(
      TransactionViewHolderParams instance) {
    TransactionViewHolderParams_MembersInjector.injectMAccountsDAO(
        instance, provideAccountsDAOProvider.get());
    TransactionViewHolderParams_MembersInjector.injectMDepartmentsDAO(
        instance, provideDepartmentsDAOProvider.get());
    TransactionViewHolderParams_MembersInjector.injectMCabbagesDAO(
        instance, provideCabbagesDAOProvider.get());
    TransactionViewHolderParams_MembersInjector.injectMPayeesDAO(
        instance, providePayeesDAOProvider.get());
    TransactionViewHolderParams_MembersInjector.injectMLocationsDAO(
        instance, provideLocationsDAOProvider.get());
    TransactionViewHolderParams_MembersInjector.injectMCategoriesDAO(
        instance, provideCategoriesDAOProvider.get());
    TransactionViewHolderParams_MembersInjector.injectMProjectsDAO(
        instance, provideProjectsDAOProvider.get());
    return instance;
  }

  public static final class Builder {
    private ContextModule contextModule;

    private PreferencesModule preferencesModule;

    private BillingModule billingModule;

    private DaoModule daoModule;

    private FtsHelperModule ftsHelperModule;

    private FtsRetrofitModule ftsRetrofitModule;

    private FtsApiModule ftsApiModule;

    private Builder() {}

    public AppComponent build() {
      if (contextModule == null) {
        throw new IllegalStateException(ContextModule.class.getCanonicalName() + " must be set");
      }
      if (preferencesModule == null) {
        this.preferencesModule = new PreferencesModule();
      }
      if (billingModule == null) {
        this.billingModule = new BillingModule();
      }
      if (daoModule == null) {
        this.daoModule = new DaoModule();
      }
      if (ftsHelperModule == null) {
        this.ftsHelperModule = new FtsHelperModule();
      }
      if (ftsRetrofitModule == null) {
        this.ftsRetrofitModule = new FtsRetrofitModule();
      }
      if (ftsApiModule == null) {
        this.ftsApiModule = new FtsApiModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }

    public Builder preferencesModule(PreferencesModule preferencesModule) {
      this.preferencesModule = Preconditions.checkNotNull(preferencesModule);
      return this;
    }

    public Builder billingModule(BillingModule billingModule) {
      this.billingModule = Preconditions.checkNotNull(billingModule);
      return this;
    }

    public Builder daoModule(DaoModule daoModule) {
      this.daoModule = Preconditions.checkNotNull(daoModule);
      return this;
    }

    public Builder ftsRetrofitModule(FtsRetrofitModule ftsRetrofitModule) {
      this.ftsRetrofitModule = Preconditions.checkNotNull(ftsRetrofitModule);
      return this;
    }

    public Builder ftsApiModule(FtsApiModule ftsApiModule) {
      this.ftsApiModule = Preconditions.checkNotNull(ftsApiModule);
      return this;
    }

    public Builder ftsHelperModule(FtsHelperModule ftsHelperModule) {
      this.ftsHelperModule = Preconditions.checkNotNull(ftsHelperModule);
      return this;
    }
  }
}
