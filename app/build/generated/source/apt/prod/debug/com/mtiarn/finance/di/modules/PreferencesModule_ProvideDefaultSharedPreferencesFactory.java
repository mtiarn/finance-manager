// Generated by Dagger (https://google.github.io/dagger).
package com.mtiarn.finance.di.modules;

import android.content.Context;
import android.content.SharedPreferences;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PreferencesModule_ProvideDefaultSharedPreferencesFactory
    implements Factory<SharedPreferences> {
  private final PreferencesModule module;

  private final Provider<Context> contextProvider;

  public PreferencesModule_ProvideDefaultSharedPreferencesFactory(
      PreferencesModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public SharedPreferences get() {
    return provideInstance(module, contextProvider);
  }

  public static SharedPreferences provideInstance(
      PreferencesModule module, Provider<Context> contextProvider) {
    return proxyProvideDefaultSharedPreferences(module, contextProvider.get());
  }

  public static PreferencesModule_ProvideDefaultSharedPreferencesFactory create(
      PreferencesModule module, Provider<Context> contextProvider) {
    return new PreferencesModule_ProvideDefaultSharedPreferencesFactory(module, contextProvider);
  }

  public static SharedPreferences proxyProvideDefaultSharedPreferences(
      PreferencesModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideDefaultSharedPreferences(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
